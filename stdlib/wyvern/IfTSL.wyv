module IfTSL

import platform.java.debug
import wyvern.internal.ast
import wyvern.option
import wyvern.util.matching.regex
import wyvern.internal.list              // We use wyvern.internal.list because wyvern.collections.list depends on IfTSL

type AST = ast.AST

def getIndent(x : String): String
  val f = x.substring(0, 1)
  (f == " " || f == "	").ifTrue(() => f + getIndent(x.substring(1, x.length())), () => "")

def indentHelper(x: String, ind: String, acc: String): String
  (x.length() == 0).ifTrue(() => acc,
      () => (x.substring(0, 1) == "\n").ifTrue(() => indentHelper(x.substring(1, x.length()), ind, acc + "\n" + ind), () => indentHelper(x.substring(1, x.length()), ind, acc + x.substring(0, 1))))

def indent(x: String, ind: String): String
  indentHelper(x, ind, "")

def getToNewLine(x: String): String
  (x.length() == 0).ifTrue(() => "",
    () => (x.substring(0, 1) == "\n").ifTrue(
      () => "",
      () => x.substring(0, 1) + getToNewLine(x.substring(1, x.length()))))

def indentAndMakeIf(x : String, cond : String): String
  val ind = getIndent(x)
  "if" + cond + "\n" + ind + indent(x, ind)

def elifAST(input : String, ctx : system.Context): String
  val elifRegex = regex("^elif\\s*\\(.*\\)\\s*(\\/\\/[^\n]*)?\n")
  val mOpt = elifRegex.findPrefixMatchOf(input)
  val isElif = mOpt.isDefined
  val em = mOpt.getOrElse( () => regex.makeMatch("", input)).after()
  val cond = (input.length() < 4).ifTrue(() => "", () => getToNewLine(input.substring(4, input.length())))
  isElif.ifTrue(() => indentAndMakeIf(em, cond), () => em)

def elifOrElseAST(input : String, ctx : system.Context) : AST
  val elseRegex = regex("^else\\s*(\\/\\/[^\n]*)?\n")
  val mOpt = elseRegex.findPrefixMatchOf(input)
  val body = mOpt.map[String](x: regex.Match => x.after()).getOrElse(() => elifAST(input, ctx))
  toUnitOrAST(body, ctx)

def thenBlockMatch(input : String) : regex.Match
  val blockRegex = regex("(\\s[^\n]*\n)+")
  val blockMatchOpt = blockRegex.findPrefixMatchOf(input)
  // if no match with an indent, then there is a "then" with no "else"
  val fullMatch = regex.makeMatch(input, "")
  val m : regex.Match = blockMatchOpt.getOrElse(() => fullMatch)
  m

def toUnitOrAST(input : String, ctx : system.Context) : ast.AST
  val stripped = ast.stripLeadingWhitespace(input, false)
  (input == "").ifTrue(() => ast.int(0), () => ast.parseExpression(stripped, ctx))

resource type FnExpr
  def apply() : Dyn
  metadata new
    def parseTSL(input : String, ctx : system.Context) : option.Option
      val fnAST : AST = ast.parseExpression(input, ctx)
      val applyDefn = ast.defDeclaration("apply", list.make[ast.FormalArg](), ast.types.dyn(), fnAST)
      val declList : list.List[ast.Decl] = list.make[ast.Decl]()
      declList.append(applyDefn)
      option.Some(ast.object(declList))

resource type Blocks
  def evalTrue() : Dyn
  def evalFalse() : Dyn
  metadata new
    def parseTSL(input : String, ctx : system.Context) : option.Option
      val trimmedInput = ast.stripLeadingWhitespace(input, true)
      val trueMatch = thenBlockMatch(trimmedInput)
      val trueAST : AST = toUnitOrAST(trueMatch.matched(), ctx)
      val falseAST : AST = elifOrElseAST(trueMatch.after(), ctx)
      val trueDefn = ast.defDeclaration("evalTrue", list.make[ast.FormalArg](), ast.types.dyn(), trueAST)
      val falseDefn = ast.defDeclaration("evalFalse", list.make[ast.FormalArg](), ast.types.dyn(), falseAST)
      val declList : list.List[ast.Decl] = list.make[ast.Decl]()
      declList.append(trueDefn)
      declList.append(falseDefn)
      option.Some(ast.object(declList))

      
def doif(condition : Boolean, tt:FnExpr, ff:FnExpr) : Dyn
  condition.ifTrue(() => tt.apply(), () => ff.apply())
  
def doifblk(condition : Boolean, block:Blocks) : Dyn
  condition.ifTrue(() => block.evalTrue(), () => block.evalFalse())
