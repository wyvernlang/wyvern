require stdout

tagged type Key
    val i:Int

type KeyedMap
    tagged type MyKey extends Key
        val i:Int
    def insert(v:Int):this.MyKey
    def lookup(k:this.MyKey):Int

def makeMap():KeyedMap = new
    tagged type MyKey extends Key
        val i:Int
    def insert(v:Int):this.MyKey = new (self) =>
        val i = v
    def lookup(k:this.MyKey):Int = k.i

val m1:KeyedMap = makeMap()
val m2:KeyedMap = makeMap()

val k1: Key = m1.insert(3)
val k2: Key = m2.insert(5)
val k3: Key = new
    val i = 2

def printInfo(k: Key, name: String): Unit
    match k:
        k:m1.MyKey => stdout.print(name + " is from m1")
        k:m2.MyKey => stdout.print(name + " is from m2")
        default => stdout.print(name + " is from nowhere")
    stdout.println()

printInfo(k1, "k1")
printInfo(k2, "k2")
printInfo(k3, "k3")
