require stdout

def iterate(a_z : Float, b_z : Float, a : Float, b : Float, c : Int) : String
    if (c > 100)
            " "
        elif ((a_z*a_z - b_z*b_z + a)*(a_z*a_z - b_z*b_z + a) + (2.0*a_z*b_z + b)*(2.0*a_z*b_z + b) > 2.0)
            encode(c)
        else
            iterate(a_z*a_z - b_z*b_z + a, 2.0*a_z*b_z + b, a, b, c + 1)

def encode(count : Int) : String
    if (count == 0)
            "D"
        elif (count < 10)
            "C"
        elif (count < 50)
            "B"
        elif (count < 200)
            "A"
        else
            " "

def iterateComplex(a0 : Float, b0 : Float, currComplex : Float) : Unit
    if (currComplex > -1.0)
            iterComplexAux(a0, b0, currComplex)
        else
            stdout.print("")

def iterComplexAux(a0 : Float, b0 : Float, currComplex : Float) : Unit
    iterateReal(a0, b0, currComplex, -1.7)
    iterateComplex(a0, b0, currComplex - 0.02)

def iterateReal(a0 : Float, b0 : Float, currComplex : Float, currReal : Float) : Unit
    if (currReal < 1.7)
            iterRealAux(a0, b0, currComplex, currReal)
        else
            stdout.println()

def iterRealAux(a0 : Float, b0 : Float, currComplex : Float, currReal : Float) : Unit
    stdout.print(iterate(currReal, currComplex, a0, b0, 0))
    iterateReal(a0, b0, currComplex, currReal + 0.02)

def julia(a0 : Float, b0 : Float) : Unit
    iterateComplex(a0, b0, 1.0)

julia(-1.0, 0.0)
stdout.println()
julia(0.26, 0.0)
