<?xml version="1.0"?>
<project name="wyvern" default="copper-generate" basedir=".">
    <property name="build.dir" value="build/" />
    <property name="src.dir" value="src" />
	
	<path id="classpath.base">
		<pathelement location="lib/junit-4.11.jar" />
		<pathelement location="lib/asm-debug-all-5.0.1.jar" />
		<pathelement location="lib/CopperCompiler.jar" />
		<pathelement location="lib/CopperRuntime.jar" />
		<pathelement location="lib/hamcrest-core-1.3.jar" />
		<pathelement location="lib/javatuples-1.2.jar" />
        <pathelement location="lib/checkstyle-7.1-all.jar" />
        <pathelement location="lib/jacocoant.jar" />
	</path>
	
    <taskdef name="copper" classname="edu.umn.cs.melt.copper.ant.CopperAntTask" classpath="lib/CopperCompiler.jar"/>
    <target name="copper-compose-compile">
        <mkdir dir="copper-composer/bin"/>
        <javac destdir="copper-composer/bin" srcdir="copper-composer/src">
            <classpath path="lib/CopperCompiler.jar:lib/ant.jar"/>
        </javac>
    </target>
    <target name="copper-compose" depends="copper-compose-compile">
        <taskdef name="composer" classname="wyvern.tools.parsing.CopperComposer" classpath="copper-composer/bin:lib/CopperCompiler.jar"/>
        <composer hostgrammar="src/wyvern/tools/parsing/Wyvern.x"
                  hostgrammarname="Wyvern"
                  extensiongrammar="src/wyvern/tools/parsing/quotelang/QuoteExtension.xml"
                  output="src/wyvern/tools/parsing/quotelang/WyvernQuote.java"/>
    </target>
    <target name="copper-subparsers">
        <taskdef name="newstart" classname="wyvern.tools.parsing.FirstChanger" classpath="copper-composer/bin:lib/CopperCompiler.jar"/>
        <newstart original="src/wyvern/tools/parsing/Wyvern.x"
            hostgrammar="Wyvern"
            newfc="objd"
            newpackage="wyvern.tools.parsing.parselang"
            newname="WyvernDecls"
            target="src/wyvern/tools/parsing/parselang/WyvernDecls.java"
            extrapackage="wyvern.tools.parsing.*"
        />
        <newstart original="src/wyvern/tools/parsing/Wyvern.x"
            hostgrammar="Wyvern"
            newfc="type"
            newpackage="wyvern.tools.parsing"
            newname="TypeParser"
            target="src/wyvern/tools/parsing/TypeParser.java"
            extrapackage="wyvern.tools.parsing.*"
        />
    </target>
    <target name="lexer">
        <copper outputfile="src/wyvern/tools/lexing/WyvernLexer.java" packagename="wyvern.tools.lexing">
            <inputs file="src/wyvern/tools/lexing/WyvernLexer.x"/>
        </copper>
    </target>
    <target name="javacc-parser" depends="lexer">
    	<javacc
    	    target="src/wyvern/tools/parsing/coreparser/WyvernParser.jj"
    	    outputdirectory="src/wyvern/tools/parsing/coreparser/"
    	    javacchome="lib/"
    	/>
    </target>
    <target name="copper-generate" depends="copper-compose,lexer,javacc-parser">
        <copper outputfile="src/wyvern/tools/parsing/Wyvern.java" packagename="wyvern.tools.parsing">
            <inputs file="src/wyvern/tools/parsing/Wyvern.x"/>
        </copper>
        <copper outputfile="src/wyvern/tools/tests/utils/TestSuiteParser.java">
            <inputs file="src/wyvern/tools/tests/utils/Testsuite.x"/>
        </copper>
        <copper outputfile="src/wyvern/tools/parsing/parselang/CupSkinParser.java" useskin="XML">
            <inputs file="src/wyvern/tools/parsing/parselang/CupSkinGrammar.xml"/>
        </copper>
    </target>
    <target name="copper-debug">
        <copper outputfile="src/wyvern/tools/parsing/Wyvern.java" dump="ON" dumpfile="copper-output.txt" packagename="wyvern.tools.parsing">
            <inputs file="src/wyvern/tools/parsing/Wyvern.x"/>
        </copper>
        <copper outputfile="src/wyvern/tools/tests/utils/TestSuiteParser.java" dump="ON" dumpfile="copper-tests-output.txt">
            <inputs file="src/wyvern/tools/tests/utils/Testsuite.x"/>
        </copper>
    </target>
	
    <target name="build" depends="copper-generate">
        <mkdir dir="${build.dir}"/>
        <javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false">
            <compilerarg value="-Xlint:deprecation"/>
            <classpath refid="classpath.base"/>
        </javac>
        <echo message="Build done" />	
    </target>
	
	<target name="test" depends="build, lint">
		<junit printsummary="on" haltonfailure="yes" fork="yes">
			<classpath>
				<path refid="classpath.base" />
				<pathelement location="${build.dir}"/>
			</classpath>
            <formatter type="brief" usefile="false" />
			<batchtest>
				<fileset dir="${src.dir}" includes="**/AntRegressionTestSuite.java" />
			</batchtest>
		</junit>
    </target>
	<target name="clean"
			description="clean up">
		<!-- Delete the ${build.dir} directory tree -->
		<delete dir="${build.dir}"/>
	</target>

    <target name="lint">
        <checkstyle config="checkstyle.xml" maxWarnings="0">
            <!-- This is the fileset of all java files in our project.
                 Uncommenting this line would be useful only have we've trimmed down the number of lint violations we have. Right now this takes 16 seconds just to dump the output of all the lint violations. Instead, we'll add files one at a time until we've got a lot covered.
                <fileset dir="${src.dir}" includes="**/*.java"/>
            -->
            <fileset dir="${src.dir}"
                includes="wyvern/tools/typedAST/core/expressions/New.java
                wyvern/tools/typedAST/core/expressions/Variable.java
                wyvern/tools/typedAST/core/expressions/Application.java
                wyvern/tools/typedAST/core/expressions/Assignment.java
                wyvern/tools/typedAST/core/expressions/Case.java
                wyvern/tools/typedAST/core/expressions/Fn.java
                wyvern/tools/typedAST/core/expressions/IfExpr.java
                wyvern/tools/typedAST/core/expressions/Instantiation.java
                wyvern/tools/typedAST/core/expressions/Invocation.java
                wyvern/tools/util/TreeWritable.java
                wyvern/tools/tests/suites/AntRegressionTestSuite.java
                wyvern/target/corewyvernIL/support/CallableExprGenerator.java"
            />
        </checkstyle>
    </target>

    <taskdef 
        resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
        classpathref="classpath.base"
    />

    <target name="coverage">
        <coverage>
            <junit printsummary="on" haltonfailure="yes" fork="yes">
                <classpath>
                    <path refid="classpath.base" />
                    <pathelement location="${build.dir}"/>
                </classpath>
                <formatter type="brief" usefile="false" />
                <batchtest>
                    <fileset dir="${src.dir}" includes="**/AntRegressionTestSuite.java" />
                </batchtest>
            </junit>
        </coverage>
        <report>
            <executiondata>
                <file file="jacoco.exec"/>
            </executiondata>

            <structure name="Wyvern">
                <classfiles>
                    <fileset dir="${build.dir}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>
            <html destdir="report"/>
        </report>
    </target>

    <taskdef 
        resource="org/jacoco/ant/antlib.xml"
        classpathref="classpath.base"
    />
</project>
