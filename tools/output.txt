./src/wyvern/tools/typedAST/extensions/interop/java/typedAST/JavaClassDecl.java:		return new JavaClassType(this);
./src/wyvern/tools/typedAST/extensions/interop/java/objects/JavaObj.java:		return new JavaClassType(jcd);
./src/wyvern/tools/typedAST/extensions/interop/java/types/JavaClassType.java:	public JavaClassType(JavaClassDecl cd) {
./src/wyvern/tools/typedAST/extensions/interop/java/types/JavaClassType.java:	public Type cloneWithChildren(Map<String, Type> children) { return new JavaClassType(decl); }
./src/wyvern/tools/typedAST/core/values/Obj.java:		return new ClassType(intEnv.map(EvaluationEnvironment::toTypeEnv), new Reference<>(typeEquivEnv), new LinkedList<String>(), taggedInfo, null);
./src/wyvern/tools/typedAST/core/declarations/ModuleDeclaration.java:		selfType = new ClassType(dclEnv, new Reference<>(), new LinkedList<>(), null, name);
./src/wyvern/tools/typedAST/core/declarations/ModuleDeclaration.java:		subTypeType = new ClassType(typeEnv, new Reference<>(), new LinkedList<>(), null, name);
./src/wyvern/tools/typedAST/core/declarations/ClassDeclaration.java:		objType = new ClassType(instanceMembersEnv, new Reference<>(), new LinkedList<>(), taggedInfo, "");
./src/wyvern/tools/typedAST/core/declarations/ClassDeclaration.java:		nameBinding = new NameBindingImpl(name, getClassType());
./src/wyvern/tools/typedAST/core/declarations/ClassDeclaration.java:		objType = new ClassType(instanceMembersEnv, new Reference<>(), new LinkedList<>(), null, "");
./src/wyvern/tools/typedAST/core/declarations/ClassDeclaration.java:		nameBinding = new NameBindingImpl(name, getClassType());
./src/wyvern/tools/typedAST/core/declarations/ClassDeclaration.java:	protected Type getClassType() {
./src/wyvern/tools/typedAST/core/declarations/ClassDeclaration.java:		return new ClassType(this);
./src/wyvern/tools/typedAST/core/declarations/ClassDeclaration.java:			if (!getEquivalentClassType().subtype(implementsCT)) {
./src/wyvern/tools/typedAST/core/declarations/ClassDeclaration.java:		return new ClassType(instanceMembersEnv, new Reference<Environment>(objTee) {
./src/wyvern/tools/typedAST/core/declarations/ClassDeclaration.java:	public Type getEquivalentClassType() {
./src/wyvern/tools/typedAST/core/expressions/New.java:					new ClassType(new Reference<>(innerEnv), new Reference<>(innerEnv), new LinkedList<>(), classVarTypeBinding.getClassDecl().getTaggedInfo(),
./src/wyvern/tools/typedAST/core/expressions/New.java:			Type classVarType = new ClassType(new Reference<>(nnames.extend(declEnv)), new Reference<>(objTee), new LinkedList<>(),
./src/wyvern/tools/typedAST/core/expressions/New.java:			Environment declEnv = env.extend(new NameBindingImpl("this", new ClassType(new Reference<>(innerEnv), new Reference<>(innerEnv), new LinkedList<>(), tagInfo, null)));
./src/wyvern/tools/typedAST/core/expressions/New.java:			ct = new ClassType(new Reference<>(nnames.extend(mockEnv)), new Reference<>(tee), new LinkedList<String>(), tagInfo, null);
./src/wyvern/tools/parsing/parselang/CopperTSL.java:				new ClassType(new Reference<>(Environment.getEmptyEnvironment()), new Reference<>(Environment.getEmptyEnvironment()), new LinkedList<>(), null, "empty");
./src/wyvern/tools/types/extensions/ClassType.java:	public ClassType() {
./src/wyvern/tools/types/extensions/ClassType.java:	public ClassType(ClassDeclaration td) {
./src/wyvern/tools/types/extensions/ClassType.java:	public ClassType(Reference<Environment> declEnv,
./src/wyvern/tools/types/extensions/ClassType.java:		return new ClassType(new Reference<>(ndEnv), new Reference<>(nteEnv), params, tagInfo, getName());
./src/wyvern/targets/TargetManager.java:		sw.visitClassType(Type.getInternalName(Pair.class));
./src/wyvern/targets/TargetManager.java:		sw2.visitClassType(Type.getInternalName(String.class));
./src/wyvern/targets/java/GenerationContext.java:				sig.visitClassType(Type.getInternalName(Supplier.class));
./src/wyvern/targets/java/GenerationContext.java:					sig.visitClassType(Type.getInternalName(BiFunction.class));
./src/wyvern/targets/java/GenerationContext.java:				sig.visitClassType(Type.getInternalName(IntFunction.class));
./src/wyvern/targets/java/GenerationContext.java:			sig.visitClassType(Type.getInternalName(Function.class));
./src/wyvern/targets/java/GenerationContext.java:			sig.visitClassType(Type.getInternalName(genTgt));
./src/wyvern/targets/java/GenerationContext.java:				sig.visitClassType(rType.getClassName());
