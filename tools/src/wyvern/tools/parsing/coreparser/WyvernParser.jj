options {
  /* default values here:
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  */
  
  // we define our own token manager
  USER_TOKEN_MANAGER = true;
  STATIC = false;
}

PARSER_BEGIN(WyvernParser)

package wyvern.tools.parsing.coreparser;

import wyvern.tools.typedAST.abs.*;
import wyvern.tools.typedAST.interfaces.*;
import wyvern.tools.typedAST.core.*;
import wyvern.tools.typedAST.core.values.*;
import wyvern.tools.typedAST.core.binding.*;
import wyvern.tools.typedAST.core.expressions.*;
import wyvern.tools.typedAST.core.declarations.*;
import wyvern.tools.errors.*;
import wyvern.tools.lexing.LexerUtils;
import wyvern.tools.generics.*;

import java.math.BigInteger;
import java.net.URI;
import java.util.*;

public class WyvernParser<AST,Type> {
    private int number = 0;
    
    public FileLocation loc(Token t) {
    	return new FileLocation(getTM().getFilename(), t.beginLine, t.beginColumn);
    }
    
    public WyvernTokenManager getTM() {
    	return (WyvernTokenManager) token_source;
    }
    
    public String freshName() {
    	return "ignoreme" + number++;
    }
    
    private ASTBuilder<AST,Type> build;
    public void setBuilder(ASTBuilder<AST,Type> builder) { build = builder; }

    private enum IndentedExpKind {
        NEW_KIND, DSL_KIND, INVOKE_KIND,
    }

    private class ExpFlags {
        public boolean isEmpty() { return exp == null; }
        public void setExp(AST a, IndentedExpKind kind) throws ParseException {
        	final IndentedExpKind INVOKE_KIND = IndentedExpKind.INVOKE_KIND;
        
            // error to have two news in one expression
            if (!isEmpty() && this.kind != INVOKE_KIND && kind != INVOKE_KIND)
                throw new ParseException("May not have two \"new\" or \"DSL literal\" expressions within the same line");
            // If you are using IntelliJ the above line will show an error. This
            // error is a false positive, caused by the following bug:
            // https://youtrack.jetbrains.com/issue/IDEABKL-6770

            if (kind == INVOKE_KIND && this.kind != null && this.kind != INVOKE_KIND)
            	return; // don't override a new or DSL literal with an invocation
            // otherwise update 
            exp = a;
            this.kind = kind;
        } 
        public AST getExp() { return exp; }
        public IndentedExpKind getExpKind() { return kind; }

        private AST exp;
        private IndentedExpKind kind;
    }    
}

PARSER_END(WyvernParser)

SPECIAL_TOKEN : /* Comments and whitespace */
{
  <SINGLE_LINE_COMMENT>
| <MULTI_LINE_COMMENT>
| <WHITESPACE>
}

TOKEN : /* Keywords */
{
  < VAL: "val" >
| < VAR: "var" >
| < DEF: "def" >
| < TYPE: "type" >
| < ASSERT: "assert" >
| < DATATYPE: "datatype" >
| < CLASS: "class" >
| < FORWARD: "forward" >
| < NONE: "NONE" >
| < TO: "to" >
| < REQUIRE: "require" >
| < METADATA: "metadata" >
| < NEW: "new" >
| < MODULE: "module" >
| < ABSTRACT: "abstract" >
| < COMPRISES: "comprises" >
| < EXTENDS: "extends" >
| < TAGGED: "tagged" >
| < MATCH: "match" >
| < IMPORT: "import" >
| < LIFTED: "lifted" >
| < DEFLT: "default" >
//| < WHILE: "while" >
//| < : "" >
// more here
| < RESOURCE : "resource" >
| < INSTANTIATE : "instantiate" >
| < AS : "as" >
| < EFFECT : "effect" >
| < RECUR : "recur" >
}

TOKEN : /* Logical Formatting */
{
  <NEWLINE>
| <INDENT>
| <DEDENT>
| <DSLLINE>
}

TOKEN : /* Identifiers */
{
  <IDENTIFIER>
}

TOKEN : /* Symbols */
{
  <LPAREN>
| <RPAREN>
| <TILDE>
| <PLUS>
| <DASH>
| <MULT>
| <DIVIDE>
| <MOD>
| <EQUALS>
| <EQUALSEQUALS>
| <GE>
| <LE>
| <NOTEQUALS>
| <COMMA>
| <EQARROW>
| <TARROW>
| <DOT>
| <COLON>
| <POUND>
| <QUESTION>
| <BAR>
| <AND>
| <GT>
| <LT>
| <LBRACK>
| <RBRACK>
| <LBRACE>
| <RBRACE>
| <BOOLEANAND>
| <BOOLEANOR>
| <BOOLEANNOT>
//| <>
}

TOKEN : /* Literals */
{
  < STRING_LITERAL >
| < CHARACTER_LITERAL >
| < FLOATING_POINT_LITERAL >
| < DECIMAL_LITERAL >
| < BOOLEAN_LITERAL >
| < RATIONAL_LITERAL >
| < DSL_LITERAL >
}

/** Root production. */
AST CompilationUnit() :
{ LinkedList<AST> imports= new LinkedList<AST>(); AST exp; LinkedList<AST> requires = new LinkedList<AST>(); }
{
  ImportDecls(imports)
  ( exp=ModuleDecl(imports) { return exp; }
  |
    exp = Script(imports, requires)  { return exp; }
  |
    /* nothing */ { return build.unitValue(null); }
  )
}

/** Root production. */
void ImportDecls(LinkedList<AST> decls) :
{ AST exp1; AST exp2; }
{
  exp1 = ImportDecl() { decls.addLast(exp1); }
  ImportDecls(decls)
|
  /* nothing */ {}
}

AST ModuleDecl(LinkedList<AST> preImports) :
{ LinkedList<AST> postImports= new LinkedList<AST>(); AST exp; Token id; Type type = null; List<GenericParameter> generics = null; List moduleArgs = new LinkedList(); boolean isResource = false; Token effects = null; }
{
  LOOKAHEAD(50)
  <MODULE> <DEF> id = <IDENTIFIER> [ generics = GenericsDecl() ] moduleArgs = Formals() <COLON> effects = <DSL_LITERAL> [ type=Type() ] <NEWLINE> exp = ModuleBody(postImports) {
    if (effects == null) {
	   return build.moduleDecl(id.image, preImports, generics, moduleArgs, postImports, exp, type, loc(id), true, true, null);
	}
	return build.moduleDecl(id.image, preImports, generics, moduleArgs, postImports, exp, type, loc(id), true, true, effects.image);
  }
|
  LOOKAHEAD(2)
  <MODULE> <DEF> id = <IDENTIFIER> [ generics = GenericsDecl() ] moduleArgs = Formals() [ <COLON> type=Type() ] <NEWLINE> exp = ModuleBody(postImports) {
	   return build.moduleDecl(id.image, preImports, generics, moduleArgs, postImports, exp, type, loc(id), true, false, null);
  }
|
  LOOKAHEAD(5)
  <MODULE> id = <IDENTIFIER> <COLON> effects = <DSL_LITERAL> [ type=Type() ] <NEWLINE> exp = ModuleBody(postImports) {
	return build.moduleDecl(id.image, preImports, generics, moduleArgs, postImports, exp, type, loc(id), isResource, true, effects.image);
  }
|
  <MODULE> id = <IDENTIFIER> [ <COLON> type=Type() ] <NEWLINE> exp = ModuleBody(postImports) {
	return build.moduleDecl(id.image, preImports, generics, moduleArgs, postImports, exp, type, loc(id), isResource, false, null);
  }
}

AST Script(LinkedList<AST> imports, LinkedList<AST> requires) :
{ AST ast; AST decl; }
{
  ast = DeclSequence(false)  { return build.script(requires, imports, ast); }
|
  decl = RequireDecl() {
      requires.addLast(decl);
  }
  ast = PostRequireScript(imports, requires) { return ast; }
}

AST PostRequireScript(LinkedList<AST> imports, LinkedList<AST> requires) :
{ AST ast; AST decl; }
{
  ImportDecls(imports) ast = DeclSequence(false)  { return build.script(requires, imports, ast); }
|
  decl = RequireDecl() {
      requires.addLast(decl);
  }
  ast = PostRequireScript(imports, requires) { return ast; }
}

AST ModuleBody(LinkedList<AST> imports) :
{ AST ast; AST decl; }
{
  ast = DeclSequence(true)  { return ast; }
|
  decl = ImportDecl() {
    imports.addLast(decl);
  }
  ast = ModuleBody(imports) { return build.sequence(decl,ast,true); }
}

AST TopLevelCode() :
{ AST ast; AST decl; }
{
  ast = DeclSequence(false)  { return ast; }
|
  decl = RequireDecl() ast = TopLevelCode() { return build.sequence(decl,ast,false); }
|
  decl = ImportDecl() ast = TopLevelCode() { return build.sequence(decl,ast,false); }
}

AST RequireDecl() :
{ URI uri; Token t; Token name = null;}
{
  t=<REQUIRE> uri = Uri() [<AS> name = <IDENTIFIER>] <NEWLINE>
    { return build.importDecl(uri, loc(t), name, true, false, false); }
}


AST ImportDecl() :
{ URI uri; Token t; Token name = null; Token meta = null; }
{
  LOOKAHEAD(2)
  t=<IMPORT> [meta=<METADATA>] uri = Uri() [<AS> name=<IDENTIFIER>] <NEWLINE>
    { return build.importDecl(uri, loc(t), name, false, meta != null, false); }
|
  t=<IMPORT> <LIFTED> [meta=<METADATA>] uri = Uri() [<AS> name=<IDENTIFIER>] <NEWLINE>
    { return build.importDecl(uri, loc(t), name, false, meta != null, true); }
}

URI Uri() :
{ Token t; String scheme = null; String s1; String s2; URI uri; }
{
	[ LOOKAHEAD(2) t = <IDENTIFIER> <COLON> { scheme = t.image; } ]
	s1 = Segment() ( <DIVIDE> s2 = Segment() { s1 = s1 + '/' + s2; } )* {
		if (scheme == null)
			scheme = "wyv";
   		try {
			return new URI(scheme, s1, null);
   		} catch (Exception e) { throw new RuntimeException(e); }
	}
}

String Segment() :
{ String s; Token t1; }
{
	t1 = <IDENTIFIER> { s = t1.image; }	
	( <DOT> t1 = <IDENTIFIER> { s = s + '.' + t1.image; } )* { return s; }
}

AST DeclSequence(boolean inModule) :
{ AST decl1; AST decl2; }
{
  decl1 = Declaration(inModule)
  ( decl2 = Declaration(inModule) { decl1 = build.sequence(decl1, decl2, inModule); } )*
    { return decl1; }
}

String AbstractionDeclaration() :
{ String abstractionLevel; }
{
  <ABSTRACT> <LBRACK> abstractionLevel = Segment() <RBRACK> { return abstractionLevel; }
}

AST Declaration(boolean inModule) :
{ String abstractionLevel=null; AST exp; }
{
  (abstractionLevel = AbstractionDeclaration()) ?
(
  exp = DefDeclaration()  { return exp; }
|
  exp = ValDeclaration()  { return exp; }
|
  exp = VarDeclaration()  { return exp; }
|
  exp = AssertDeclaration() { return exp; }
|
  exp = EffectDeclaration() { return exp; }
|
   LOOKAHEAD(4) exp = TypeDeclaration()  { return exp; }
|
   LOOKAHEAD(4) exp = TaggedTypeDeclaration()  { return exp; }
|
   LOOKAHEAD(4) exp = DatatypeDeclaration(null) { return exp; }
|
   LOOKAHEAD(4) exp = TypeAbbrevDeclaration() { return exp; }
|
  exp = ForwardDeclaration()  { return exp; }
|
  exp = ExpressionLine(inModule) { return exp; }
|
  exp = Instantiation() { return exp; }
)
//|
//  exp = WhileDeclaration() { return exp; }
}

AST DefDeclaration() :
{ Type resultType; Token name; AST body; List args; List<GenericParameter> gentypes = null; Token effects = null; }
{
  <DEF> (name=<IDENTIFIER> | name = OverrideOperator()) [gentypes = GenericsDecl()] args = Formals() <COLON> [effects = <DSL_LITERAL>] resultType = Type() body=DefBody() {
	if (effects==null) {
    	return build.defDecl(name.image, resultType, gentypes, args, body, false, loc(name), null);
  	} 
  	return build.defDecl(name.image, resultType, gentypes, args, body, false, loc(name), effects.image);
  }
}

AST ValDeclaration() :
{ Type type = null; Token name; AST body; List args; }
{
  <VAL> (name=<IDENTIFIER> | name=<STRING_LITERAL>) [ <COLON> type = Type() ] <EQUALS> body = ExpressionLine(false) {
	return build.valDecl(name.image, type, body, loc(name));
  }
}

AST AssertDeclaration() :
{ Token t; Token description = null; AST exp; }
{
  t=<ASSERT>
  [LOOKAHEAD(2) description=<STRING_LITERAL> <COLON>]
  exp = ExpressionLine(false) {
	return build.assertion(description == null ? null : description.image, exp, loc(t));
  }
}

AST TypeAbbrevDeclaration() :
{ Token t = null; Type reference = null; Token alias = null; AST metadata = null; }
{
   t = <TYPE> alias = <IDENTIFIER>
    ( <EQUALS> reference = Type())? <NEWLINE>
    [ <INDENT> <METADATA> metadata = ExpressionLine(false) <DEDENT> ] {
     return build.typeAbbrevDecl(alias.image, reference, metadata, loc(t));
   }
}

AST VarDeclaration() :
{ Type type; Token name; AST body; List args; }
{
  <VAR> name=<IDENTIFIER> <COLON> type = Type() <EQUALS> body = ExpressionLine(false) {
	return build.varDecl(name.image, type, body, loc(name));
  }
}

AST EffectDeclaration() : // in module def, must be defined
{ Token name; Token effects; }
{
   <EFFECT> name = <IDENTIFIER> <EQUALS> effects = <DSL_LITERAL> <NEWLINE> {
    return build.effectDecl(name.image, effects.image, loc(name)); 
   }
}

AST ForwardDeclaration() :
{ Type type; Token t; AST exp; }
{
  t=<FORWARD> type=Type() <TO> exp=ExpressionLine(false) {
	return build.forwardDecl(type, exp, loc(t));
  }
}

// while declaration
//AST WhileDeclaration() :
//{}
//{}

AST TypeDeclaration() :
{ Token name; AST body = null; AST metadata = null; Type extendedType=null; List<Type> comprisesList=null; boolean isTagged = false;
  Token selfName = null;
  Object tagInfo = null; boolean isResource = false;
}
{
  [<RESOURCE> { isResource = true; } ]
  <TYPE> name=<IDENTIFIER>
  [ <EXTENDS> extendedType=Type() ]
  [ <COMPRISES> comprisesList=TypeList() ]
  [ <LPAREN> selfName=<IDENTIFIER> <RPAREN> <EQARROW> ]
  <NEWLINE> <INDENT> body=DeclTypes(selfName)
                    [ <METADATA> metadata = ExpressionLine(false) ]
             <DEDENT> {
    if (isTagged || (extendedType != null) || (comprisesList != null)) {
      tagInfo = build.tagInfo(extendedType, comprisesList);
    }
    String self = (selfName == null) ? null : selfName.image;
	return build.typeDecl(name.image, body, tagInfo, metadata, loc(name), isResource, self);
  }
}

AST TaggedTypeDeclaration() :
{ Token name; AST body = null; AST metadata = null; Type extendedType=null; List<Type> comprisesList=null; boolean isTagged = false;
  Token selfName = null;
  Object tagInfo = null; boolean isResource = false;
}
{
  <TAGGED>
  [<RESOURCE> { isResource = true; } ]
  <TYPE> name=<IDENTIFIER>
  [ <EXTENDS> extendedType=Type() ]
  [ <COMPRISES> comprisesList=TypeList() ]
  [ <LPAREN> selfName=<IDENTIFIER> <RPAREN> <EQARROW> ]
  <NEWLINE> (<INDENT> body=DeclTypes(selfName)
                    [ <METADATA> metadata = ExpressionLine(false) ]
             <DEDENT>)?
  {
    tagInfo = build.tagInfo(extendedType, comprisesList);
    String self = (selfName == null) ? null : selfName.image;
	return build.typeDecl(name.image, body, tagInfo, metadata, loc(name), isResource, self);
  }
}

AST DatatypeDeclaration(String outerThisName) :
{ Token name; AST body = null; AST metadata = null; Type extendedType=null; List<Type> comprisesList=null; boolean isTagged = false;
  List<GenericParameter> gentypes = null;
  Object tagInfo = null; boolean isResource = false;
}
{
  [<RESOURCE> { isResource = true; } ]
  <DATATYPE> name=<IDENTIFIER> [gentypes = GenericsDecl()]
  [ <LPAREN> <IDENTIFIER> <RPAREN> <ARROW> ]
  <NEWLINE> <INDENT> body=DeclTypes(null)
                    [ <METADATA> metadata = ExpressionLine(false) ]
             <DEDENT> {
    if (isTagged || (extendedType != null) || (comprisesList != null)) {
      tagInfo = build.tagInfo(extendedType, comprisesList);
    }
	return build.datatypeDecl(name.image, gentypes, body, tagInfo, metadata, loc(name), isResource, outerThisName);
  }
}

AST DeclTypes(Token thisToken) :
{ AST decl1; AST decl2; AST body;
  String thisName = thisToken == null ? "this" : thisToken.image; }
{
  decl1 = DeclType(thisName)
  ( decl2 = DeclType(thisName) { decl1 = build.sequence(decl1, decl2, true); } )*
    { return decl1; }
}

AST DeclType(String thisName) :
{ AST exp; }
{
  exp = DefDeclType()  { return exp; }
|
  exp = ValDeclType()  { return exp; }
|
  exp = VarDeclType()  { return exp; }
|
  exp = EffectDeclType() { return exp; }
|
  exp = ConstructDeclType() { return exp; }
|
  LOOKAHEAD(4) exp = TypeDeclaration()  { return exp; }
|
  LOOKAHEAD(4) exp = TaggedTypeDeclaration()  { return exp; }
|
  LOOKAHEAD(4) exp = DatatypeDeclaration(thisName)  { return exp; }
|
  exp = TypeAbbrevDeclaration() { return exp; }
}

AST DefDeclType() :
{ Type resultType; Token name; List args; List<GenericParameter> gentypes=null; Token effects = null; }
{
  <DEF> (name = <IDENTIFIER> | name = OverrideOperator()) [gentypes = GenericsDecl()] args = Formals() <COLON> [effects = <DSL_LITERAL>] resultType = Type() <NEWLINE> {
	if (effects==null) {
    	return build.defDeclType(name.image, resultType, gentypes, args, loc(name), null);
  	} 
  	return build.defDeclType(name.image, resultType, gentypes, args, loc(name), effects.image);
  }
}

AST ValDeclType() :
{ Type type; Token name; List args; }
{
  <VAL> (name=<IDENTIFIER> | name=<STRING_LITERAL>) <COLON> type = Type() <NEWLINE> {
	return build.valDeclType(name.image, type, loc(name));
  }
}

AST VarDeclType() :
{ Type type; Token name; List args; }
{
  <VAR> name=<IDENTIFIER> <COLON> type = Type() <NEWLINE> {
  return build.varDeclType(name.image, type, loc(name));
  }
}

AST EffectDeclType() :
{ Token name; Token effects = null;}
{
  LOOKAHEAD(10)
  <EFFECT> name = <IDENTIFIER> <LE> effects = <DSL_LITERAL> <NEWLINE> {
     return build.effectDeclType(name.image, effects.image, true, loc(name));
  }
|
  LOOKAHEAD(10)
  <EFFECT> name = <IDENTIFIER> <GE> effects = <DSL_LITERAL> <NEWLINE> {
      return build.effectDeclType(name.image, effects.image, false, loc(name));
    }
|
  LOOKAHEAD(4)
  <EFFECT> name = <IDENTIFIER> <EQUALS> effects = <DSL_LITERAL> <NEWLINE> {
  	if (effects==null) {
    	return build.effectDeclType(name.image, null, loc(name));
  	}
  	return build.effectDeclType(name.image, effects.image, loc(name));
   }
|
   <EFFECT> name = <IDENTIFIER> <NEWLINE> {
      	return build.effectDeclType(name.image, null, loc(name));
    }

}

AST ConstructDeclType() :
{ Type resultType; Token name; List args = null; List<GenericParameter> gentypes=null; Token effects = null;}
{
  (name = <IDENTIFIER>) [gentypes = GenericsDecl()] [args = Formals()] <NEWLINE> {
    return build.constructDeclType(name.image, gentypes, args, loc(name));
  }
}

List Formals_Lambda() :
{ List args = new LinkedList(); Object singleParameter;}
{     singleParameter = Formal_Lambda_NoEqArrow() { 
            args.add(singleParameter);
            return args;
        }
   | <LPAREN> [ FormalsList_Lambda(args) ] <RPAREN> {
			return args;
		}
}

void FormalsList_Lambda(List args):
{ Object formal;}
{
  formal = Formal_Lambda() {
      args.add(formal);
  }
  ( <COMMA> formal = Formal_Lambda() {
      args.add(formal);
	}
  )*
}

Object Formal_Lambda() :
{ Token id; Type type = null; }
{
  id = <IDENTIFIER> [<COLON> type = Type()] {
      return build.formalArg(id.image, type);
  }
}

Object Formal_Lambda_NoEqArrow() :
{ Token id; Type type = null; }
{
  id = <IDENTIFIER> [<COLON> type = NonArrowType()] {
      return build.formalArg(id.image, type);
  }
}

List Formals() :
{ List args = new LinkedList(); }
{
  <LPAREN> [ FormalsList(args) ] <RPAREN> {
			return args;
		}
}

void FormalsList(List args) :
{ Object formal; }
{
  formal = Formal() {
      args.add(formal);
  }
  ( <COMMA> formal = Formal() {
      args.add(formal);
	}
  )*
}

Object Formal() :
{ Token id; Type type; }
{
  id = <IDENTIFIER> <COLON> type = Type() {
      return build.formalArg(id.image, type);
  }
}

AST DefBody() :
{ AST exp; }
{
  <NEWLINE> <INDENT> exp = DeclSequence(false) <DEDENT> { return exp; }
|
  <EQUALS> exp = ExpressionLine(false) { return exp; }
}

Token DSLLines() :
{ Token t, t2; int beginColumn; String content = ""; }
{
    t=<DSLLINE> {
      content = t.specialToken.image + t.image;
      beginColumn = t.specialToken.beginColumn;
  }
  ( t2 = <DSLLINE> {
      content = content + t2.specialToken.image + t2.image;
    }
  )*
  { 
    //if (content.trim().length() == 0) {
    if (LexerUtils.isCommentsAndWhitespace(content)) {
      // just comments and whitespace, return null; didn't really find a DSL
      return null;
    }
    t.image = content;
    t.beginColumn = beginColumn-1; // this DSL line should start where the indent did
    return t;
  }
}

AST ExpressionLine(boolean makeValDecl) :
{ AST exp; AST decls = null; Token t; Token t2 = null; Object caseArm; List cases; ExpFlags flags = new ExpFlags(); }
{
  exp = Expression(flags) t=<NEWLINE>
  [
    t2=<INDENT> decls = DeclSequence(true) <DEDENT>
  |
    t2=DSLLines() 
  ]
  {
    if (!flags.isEmpty()) {
        if (flags.getExpKind() == IndentedExpKind.NEW_KIND) {
            build.setNewBody(flags.getExp(), decls);
    	} else if (flags.getExpKind() == IndentedExpKind.INVOKE_KIND) {
            if (t2 != null) {
                AST dsl = build.dsl(loc(t2));
                build.setDSLBody(dsl, t2.image);
			    build.addArgument(flags.getExp(),dsl);
	        }
    	} else if (t2 == null) {
            ToolError.reportError(ErrorMessage.EXPECTED_DSL_BLOCK, (HasLocation)flags.getExp());
        } else {
    	    build.setDSLBody(flags.getExp(), t2.image);
    	}
    } else if (t2 != null) {
        ToolError.reportError(ErrorMessage.ILLEGAL_INDENTED_BLOCK, loc(t2));
    }
    
    // create a decl if requested (e.g. we are within a module)
    if (!makeValDecl)
    	return exp;
  	else
  		return build.valDecl(freshName(), null, exp, loc(t));
  }
|
  t=<MATCH> exp=Expression(flags) <COLON> <NEWLINE> { cases = new LinkedList(); }
  <INDENT>
  ( caseArm=CaseArm() { cases.add(caseArm); } )*
  <DEDENT> {
    return build.match(exp, cases, loc(t));
  }
}

Object CaseArm() :
{ Token id; Token t; Token dslTok = null; AST exp = null; Type type=null; }
{
  ((id=<IDENTIFIER> <COLON> type=NonArrowType())
  | id=<DEFLT>) t=<EQARROW>
  ( exp=ExpressionLine(false)
  | <NEWLINE> <INDENT> exp = DeclSequence(false) <DEDENT>
  ) {
    return build.caseArm(id.image,type,exp,loc(t));
  }
}

AST Expression(ExpFlags flags) :
{ AST exp; AST exp2 = null; Object formal; Token t = null; }
{
  LOOKAHEAD(4)
    exp = LambdaFn(flags) { return exp; }
|  
    exp = AssignmentExpression(flags) { return exp; }
}

AST AssignmentExpression(ExpFlags flags) :
{ AST exp; AST exp2 = null; Object formal; Token t = null; }
{
  exp = BooleanRelationalExpression(flags) [ t=<EQUALS> exp2 = Expression(flags) ] {
    if (exp2 != null) {
        return build.assignment(exp, exp2, loc(t));
    }
    return exp;
  }
}

AST LambdaFn(ExpFlags flags) :
{ List formals; AST body; Token t; }
{
    formals = Formals_Lambda() t=<EQARROW>
    (body = Expression(flags) 
    | <INDENT> body = DeclSequence(false) <DEDENT>
    ) {
        return build.fn(formals, body, loc(t));
    }
}



List<Type> TypeList() :
{ List<Type> types = new LinkedList<Type>(); Type type; }
{
  type=Type() { types.add(type); }
  ( <COMMA> type=Type() { types.add(type); } )*
  { return types; }
|
  { return types; }
}

Type Type() :
{ Type arrowResult = null; Token ar=null; Type t; Type t2; List<Type> tList=null; Token effects = null; }
{
 t = NonArrowType()
 (<MULT> t2 = NonArrowType() {
   if (tList == null) {
       tList = new LinkedList<Type>();
       tList.add(t);
   }
   tList.add(t2);
 })*
 ((ar=<TARROW> | ar=<EQARROW>) [effects = <DSL_LITERAL>] arrowResult = Type() )? {

    if (arrowResult == null) {
        return t;
    } else {
        if (tList == null) {
            tList = new LinkedList<Type>();
            tList.add(t);
        }
        boolean resourceArrow = (ar.kind == TARROW);
        return build.arrowType(tList, arrowResult, resourceArrow, effects == null ? null : effects.image, loc(ar));
    }
 }
}

Type NonArrowType() :
{ Type regularType; Type optionType; }
{
    LOOKAHEAD(50)
    optionType = OptionType() {
        return optionType;
    }
|
    regularType = RegularType() {
    return regularType;
    }
}

Type OptionType() :
{ Token questionMark; AST exp; List<GenericArgument> generics; Type t; GenericArgument genArg = null; }
{
    // syntactic sugar for option types
    // T? as sugar for option.Option[T] (T stands for a type)
    genArg=GenericArgumentRegularType() questionMark = <QUESTION> {
        exp = build.var("option", loc(questionMark));
        t = build.qualifiedType(exp, "Option");

        // add the generic argument to the generics linked list
        generics = new LinkedList<GenericArgument>();
        generics.add(genArg);

        Object o = build.parameterizedType(t, generics, loc(questionMark));
        t = (Type) o;

        return t;
    }
}

AST OptionNoneValue() :
{ Token none; AST exp; AST lhs; List<AST> rhs; List<GenericArgument> generics; GenericArgument genArg = null; Type type; }
{
    // built-in None value that works for all T. NONE = option.None[Dyn] <: option.None[T] for all T
    // NONE is equivalent to option.None[Dyn]
    none = <NONE> {
        lhs = build.var("option", loc(none));
        exp = build.invocation(lhs, "None", null, loc(none));

        // generate generics
        generics = new LinkedList<GenericArgument>();
        type = build.nominalType("Dyn", loc(none)); // create Dynamic type
        genArg = new GenericArgument(GenericKind.TYPE, type);
        generics.add(genArg);

        // generate rhs (Arguments)
        rhs = new LinkedList<AST>(); // initialize empty AST list for rhs
        exp = build.application(exp, rhs, null, generics, /*recur*/false);
        
        return exp;
    }
}

Type RegularType() :
{ Token id = null; Token id2 = null; AST exp = null; List<GenericArgument> generics = null; Type t = null; }
{
  <LPAREN> t=Type() <RPAREN> {
      return t;
  }
|
  id = <IDENTIFIER> (<DOT> id2 = <IDENTIFIER> {
    if (exp == null) {
        exp = build.var(id.image, loc(id));
    } else {
        exp = build.invocation(exp, id.image, null, loc(id));
    }
    id = id2;
 })*
 ( generics = Generics() )? {
    if (exp == null) {
        t = build.nominalType(id.image, loc(id));
    } else {
        t = build.qualifiedType(exp, id2.image);
    }
    
    if (generics != null) {
        Object o = build.parameterizedType(t, generics, loc(id));
        t = (Type) o;
    }
    return t;
 }
}

AST BooleanRelationalExpression(ExpFlags flags) :
{ AST exp; AST exp2 = null; Token t; }
{
    exp = RelationalExpression(flags)
    [ ( t=<BOOLEANAND> | t=<BOOLEANOR> ) exp2=BooleanRelationalExpression(flags) {
      exp = build.invocation(exp, t.image, exp2, loc(t));
    } ]
    { return exp; }
}

AST RelationalExpression(ExpFlags flags) :
{ AST exp; AST exp2 = null; Token t; }
{
  exp = AdditiveExpression(flags)
  [ ( t=<GT> | t=<LT> | t=<EQUALSEQUALS> | t=<LE> | t=<GE> | t=<NOTEQUALS> ) exp2=AdditiveExpression(flags) {
    exp = build.invocation(exp, t.image, exp2, loc(t)); 
  } ]
  { return exp; }
}

AST AdditiveExpression(ExpFlags flags) :
{ AST exp; AST exp2 = null; Token t; }
{
  exp = MultiplicativeExpression(flags)
  ( ( t=<PLUS> | t=<DASH> ) exp2=MultiplicativeExpression(flags) {
    exp = build.invocation(exp, t.image, exp2, loc(t)); 
  } )*
  { return exp; }
}

AST MultiplicativeExpression(ExpFlags flags) :
{ AST exp; AST exp2 = null; Token t; }
{
  exp = UnaryExpression(flags)
  ( ( t=<MULT> | t=<DIVIDE> | t=<MOD> ) exp2=UnaryExpression(flags) {
  	exp = build.invocation(exp, t.image, exp2, loc(t));
  } )*
  { return exp; }
}

AST UnaryExpression(ExpFlags flags) :
{ AST exp; Token t; }
{
  <PLUS> exp = UnaryExpression(flags) { return exp; }
|
  t=<DASH> exp = UnaryExpression(flags) {
    return build.invocation(exp, "negate", build.unitValue(loc(t)), loc(t));
  }
|
  t=<BOOLEANNOT> exp = UnaryExpression(flags) {
    return build.invocation(exp, "!", build.unitValue(loc(t)), loc(t));
  }
|
  exp = PrimaryExpression(flags) { return exp; }
}

AST PrimaryExpression(ExpFlags flags) :
{ AST exp; Token t; Token selfName = null;
  LinkedList<String> names = new LinkedList<String>();
  LinkedList<AST> args = new LinkedList<AST>();
  Token r = null;
}
{
   [ r = <RECUR> ] { boolean recur = r != null; } exp = PrimaryPrefix(flags) ( exp = PrimarySuffix(exp,flags, recur) )* ( Extension(names, args) )*  {
    if (names.size() + args.size() > 0) {
      exp = build.addArguments(exp,names,args);
    }
    flags.setExp(exp, IndentedExpKind.INVOKE_KIND);
    return exp;
  }
|
  exp = OptionNoneValue() { return exp; }
|
  t = <NEW> [ <LPAREN> selfName=<IDENTIFIER> <RPAREN> <EQARROW>] {
    String self = (selfName == null) ? null : selfName.image;
    exp = build.newObj(loc(t), self);
    
    // store a reference to the new expression so we can fill in the fields later!
    flags.setExp(exp, IndentedExpKind.NEW_KIND);
    return exp;
  }
}

void Extension(LinkedList<String> names, LinkedList<AST> args) :
{ AST exp; Token t; }
{
  t=<IDENTIFIER> {
    names.addLast(t.image);
  }
|
  t=<DSL_LITERAL> {
    if (!names.isEmpty())
    	names.addLast("ARG"); // track parameters past the first keyword
    exp = build.dsl(loc(t));
    build.setDSLBody(exp, t.image);
    args.addLast(exp);
  }
}

AST PrimaryPrefix(ExpFlags flags) :
{ AST exp; Token t; Token t2 = null; boolean recur = false; }
{
  exp = Literal() { return exp; }
|
  (<RECUR>)? { recur = true; } t = <IDENTIFIER> [ t2 = <BOOLEANNOT> ] { return build.var(t.image, loc(t), t2 != null);  }
|
  <LPAREN> exp = Expression(flags) <RPAREN> { return exp; }
|
  t=<TILDE> {
    exp = build.dsl(loc(t));
    flags.setExp(exp, IndentedExpKind.DSL_KIND);
    return exp;
  }
}

AST Literal() :
{ AST exp; Token lit; }
{
 lit = <RATIONAL_LITERAL> { return build.rationalLit(lit.image, loc(lit)); }
|
  lit = <FLOATING_POINT_LITERAL> { return build.floatLit(Float.parseFloat(lit.image), loc(lit)); }
|
  lit = <STRING_LITERAL>  { return build.stringLit(lit.image, loc(lit)); }
|
  lit = <CHARACTER_LITERAL>  { return build.characterLit(lit.image.charAt(0), loc(lit)); }
|
  lit = <DECIMAL_LITERAL> { return build.integerLit(new BigInteger(lit.image), loc(lit)); }
|
  lit = <BOOLEAN_LITERAL> { return build.booleanLit(Boolean.parseBoolean(lit.image), loc(lit)); }
|
  lit = <DSL_LITERAL> {
    exp = build.dsl(loc(lit));
    build.setDSLBody(exp, lit.image);
    return exp;
  }
}

AST PrimarySuffix(AST lhs, ExpFlags flags, boolean recur) :
{ List<AST> rhs; Token t; List<GenericArgument> generics = null;}
{
  <DOT> (t = <IDENTIFIER> | t = <STRING_LITERAL>) { 
    return build.invocation(lhs, t.image, null, loc(t)); }
|
  [generics = Generics()] rhs = Arguments(flags) {
    return build.application(lhs, rhs, null, generics, recur);
  }
}

List<AST> Arguments(ExpFlags flags) :
{ AST exp = null; List<AST> expList = null; Token t; }
{
  t = <LPAREN> [ expList = ArgumentList(flags, loc(t)) ] <RPAREN> {
    return expList;
  }
}

List<AST> ArgumentList(ExpFlags flags, FileLocation loc) :
{ AST exp; AST exp2; LinkedList<AST> expList = new LinkedList<AST>(); Token t; }
{
  exp = Expression(flags) {
    expList.add(exp);
  }
  ( t=<COMMA> exp2 = Expression(flags) {
  		expList.addLast(exp2);
	}
  )* {
  		return expList;
  	}
 }
  	
List<AST> ExpressionList():
{ AST exp; LinkedList<AST> expList = new LinkedList<AST>(); ExpFlags flags = new ExpFlags(); Token t; }
{
    (exp = Expression(flags) {
        expList.add(exp);
    }
        ( t=<COMMA> exp = Expression(flags) {
            expList.add(exp);
        }
            )*)? {
        return expList;
  	}
 }
  	
AST Instantiation() :
{ URI uri; Token name; List<AST> args;}
{
<INSTANTIATE> uri = Uri() args = Arguments(new ExpFlags()) <AS> name=<IDENTIFIER> <NEWLINE> 
{return build.instantiation(uri, args, name, loc(name));}
}

Token OverrideOperator() :
{Token operator;}
{
      operator = <PLUS> {return operator;}
	| operator = <DASH> {return operator;}
	| operator = <MULT> {return operator;}
    | operator = <DIVIDE> {return operator;}
    | operator = <MOD> {return operator;}

}

List Generics() :
{ List gens = null; }
{
  <LBRACK> gens = GenericList() <RBRACK> {
    return gens;
  }
}

List GenericList() :
{ LinkedList<GenericArgument> genList = new LinkedList<GenericArgument>(); GenericArgument t1, t2; }
{

  t1 = GenericArgument()
  ( <COMMA> t2 = GenericArgument() {
    genList.addLast(t2);
  }
  )* {
    genList.addFirst(t1);
    return genList;
  }
}

GenericArgument GenericArgument() :
{ Type type; Token effect; }
{ type = Type() { return new GenericArgument(GenericKind.TYPE, type); }
| effect = <DSL_LITERAL> { return new GenericArgument(effect.image); }
}

GenericArgument GenericArgumentRegularType() :
{ Type type; Token effect; }
{ type = RegularType() { return new GenericArgument(GenericKind.TYPE, type); }
}

List GenericsDecl() :
{ List gens = null; }
{
  <LBRACK> gens = GenericListDecl() <RBRACK> {
    return gens;
  }
}

List GenericListDecl() :
{ LinkedList<GenericParameter> genList = new LinkedList<GenericParameter>(); GenericParameter t1, t2; }
{
  t1 = GenericParameter()
  ( <COMMA> t2 = GenericParameter() {
    genList.addLast(t2);
  }
  )* {
    genList.addFirst(t1);
    return genList;
  }
}

GenericParameter GenericParameter() :
{ Token t; }
{ <EFFECT> t = <IDENTIFIER> { return new GenericParameter(GenericKind.EFFECT, t.image); }
| t = <IDENTIFIER> { return new GenericParameter(GenericKind.TYPE, t.image); }
}
