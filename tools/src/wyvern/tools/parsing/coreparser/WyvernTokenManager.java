package wyvern.tools.parsing.coreparser;

import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Iterator;
import java.util.List;

import edu.umn.cs.melt.copper.runtime.engines.single.SingleDFAEngine;
import edu.umn.cs.melt.copper.runtime.logging.CopperParserException;
import wyvern.tools.errors.ErrorMessage;
import wyvern.tools.errors.FileLocation;
import wyvern.tools.errors.ToolError;
import wyvern.tools.lexing.LexerUtils;

public class WyvernTokenManager<Lexer extends SingleDFAEngine<List< Token >, CopperParserException>> implements TokenManager {
	private Constructor<Lexer> lexerCtor;

	private Reader input;
	private String filename;
	private Iterator<Token> tokens;
	private Token specialToken;

	/*
	 * This is used to create an EOF token in getNextToken().
	 * Note that the WyvernTokenManager class may be used with different parsers.
	 * The EOF constant is generated by JavaCC in the ...Constants.java file from
	 * the parser specification in the associated .jj file. It is always zero. So,
	 * we have introduced this constant and initialized it to zero to keep the
	 * WyvernTokenManager class independent of the parser it is used with.
	 */
	private static final int EOF = 0;
	
	
	public WyvernTokenManager(Reader input, String filename, Class<Lexer> lexerClass) {
		try {
			this.lexerCtor = lexerClass.getConstructor();

			this.input = input;
			this.filename = filename;
			this.tokens = null;
		}
		catch (NoSuchMethodException e)
		{
			throw new RuntimeException(e);
		}
	}
	
	private void readTokenList() throws CopperParserException, IOException, InstantiationException,
										IllegalAccessException, InvocationTargetException {
		tokens = this.lexerCtor.newInstance().parse(input, filename).iterator();
	}

	@Override
	public Token getNextToken() {
		if (tokens == null) {
			try {
				readTokenList();
			} catch (CopperParserException e) {
				ToolError.reportError(ErrorMessage.PARSE_ERROR, (FileLocation) null, e.getMessage());
				throw new RuntimeException(e);
			} catch (IOException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
				throw new RuntimeException(e);
			}
		}

		while (tokens.hasNext()) {
			Token t = tokens.next();
			t.specialToken = specialToken;
			if (!LexerUtils.isSpecial(t)) {
				specialToken = null;
				return t;
			}
			specialToken = t;
		}

		return new Token(EOF);
	}
	
	public String getFilename() {
		return filename;
	}

}
